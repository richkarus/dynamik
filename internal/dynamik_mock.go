// Code generated by MockGen. DO NOT EDIT.
// Source: internal/dynamik.go
//
// Generated by this command:
//
//	mockgen -source=internal/dynamik.go -destination=dynamik_mock.go
//

// Package mock_dynamik is a generated GoMock package.
package dynamik

import (
	context "context"
	reflect "reflect"

	cloudflare_go "github.com/cloudflare/cloudflare-go"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetZoneDnsRecords mocks base method.
func (m *MockClient) GetZoneDnsRecords(ctx context.Context, zoneId string) ([]cloudflare_go.DNSRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetZoneDnsRecords", ctx, zoneId)
	ret0, _ := ret[0].([]cloudflare_go.DNSRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetZoneDnsRecords indicates an expected call of GetZoneDnsRecords.
func (mr *MockClientMockRecorder) GetZoneDnsRecords(ctx, zoneId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetZoneDnsRecords", reflect.TypeOf((*MockClient)(nil).GetZoneDnsRecords), ctx, zoneId)
}

// GetZoneID mocks base method.
func (m *MockClient) GetZoneID(ctx context.Context, zoneName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetZoneID", ctx, zoneName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetZoneID indicates an expected call of GetZoneID.
func (mr *MockClientMockRecorder) GetZoneID(ctx, zoneName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetZoneID", reflect.TypeOf((*MockClient)(nil).GetZoneID), ctx, zoneName)
}

// GetZoneName mocks base method.
func (m *MockClient) GetZoneName(ctx context.Context, zoneId string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetZoneName", ctx, zoneId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetZoneName indicates an expected call of GetZoneName.
func (mr *MockClientMockRecorder) GetZoneName(ctx, zoneId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetZoneName", reflect.TypeOf((*MockClient)(nil).GetZoneName), ctx, zoneId)
}

// NewDynamikClient mocks base method.
func (m *MockClient) NewDynamikClient() (*cloudflare_go.API, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewDynamikClient")
	ret0, _ := ret[0].(*cloudflare_go.API)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewDynamikClient indicates an expected call of NewDynamikClient.
func (mr *MockClientMockRecorder) NewDynamikClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDynamikClient", reflect.TypeOf((*MockClient)(nil).NewDynamikClient))
}

// UpdateDynamicDnsRecord mocks base method.
func (m *MockClient) UpdateDynamicDnsRecord(ctx context.Context, zoneId string, dnsRecord cloudflare_go.DNSRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDynamicDnsRecord", ctx, zoneId, dnsRecord)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDynamicDnsRecord indicates an expected call of UpdateDynamicDnsRecord.
func (mr *MockClientMockRecorder) UpdateDynamicDnsRecord(ctx, zoneId, dnsRecord any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDynamicDnsRecord", reflect.TypeOf((*MockClient)(nil).UpdateDynamicDnsRecord), ctx, zoneId, dnsRecord)
}
